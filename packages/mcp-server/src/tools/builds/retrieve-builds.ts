// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from '@stainless-api/sdk-mcp/filtering';
import { Metadata, asTextContentResult } from '@stainless-api/sdk-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Stainless from '@stainless-api/sdk';

export const metadata: Metadata = {
  resource: 'builds',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/v0/builds/{buildId}',
};

export const tool: Tool = {
  name: 'retrieve_builds',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nRetrieve a build by its ID.\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/build',\n  $defs: {\n    build: {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'Build ID'\n        },\n        config_commit: {\n          type: 'string'\n        },\n        created_at: {\n          type: 'string',\n          format: 'date-time'\n        },\n        documented_spec: {\n          anyOf: [            {\n              type: 'object',\n              properties: {\n                content: {\n                  type: 'string'\n                },\n                type: {\n                  type: 'string',\n                  enum: [                    'content'\n                  ]\n                }\n              },\n              required: [                'content',\n                'type'\n              ]\n            },\n            {\n              type: 'object',\n              properties: {\n                expires: {\n                  type: 'string',\n                  format: 'date-time'\n                },\n                type: {\n                  type: 'string',\n                  enum: [                    'url'\n                  ]\n                },\n                url: {\n                  type: 'string'\n                }\n              },\n              required: [                'expires',\n                'type',\n                'url'\n              ]\n            }\n          ]\n        },\n        object: {\n          type: 'string',\n          enum: [            'build'\n          ]\n        },\n        org: {\n          type: 'string'\n        },\n        project: {\n          type: 'string'\n        },\n        targets: {\n          type: 'object',\n          properties: {\n            cli: {\n              $ref: '#/$defs/build_target'\n            },\n            csharp: {\n              $ref: '#/$defs/build_target'\n            },\n            go: {\n              $ref: '#/$defs/build_target'\n            },\n            java: {\n              $ref: '#/$defs/build_target'\n            },\n            kotlin: {\n              $ref: '#/$defs/build_target'\n            },\n            node: {\n              $ref: '#/$defs/build_target'\n            },\n            php: {\n              $ref: '#/$defs/build_target'\n            },\n            python: {\n              $ref: '#/$defs/build_target'\n            },\n            ruby: {\n              $ref: '#/$defs/build_target'\n            },\n            terraform: {\n              $ref: '#/$defs/build_target'\n            },\n            typescript: {\n              $ref: '#/$defs/build_target'\n            }\n          }\n        },\n        updated_at: {\n          type: 'string',\n          format: 'date-time'\n        }\n      },\n      required: [        'id',\n        'config_commit',\n        'created_at',\n        'documented_spec',\n        'object',\n        'org',\n        'project',\n        'targets',\n        'updated_at'\n      ]\n    },\n    build_target: {\n      type: 'object',\n      properties: {\n        commit: {\n          anyOf: [            {\n              type: 'object',\n              properties: {\n                status: {\n                  type: 'string',\n                  enum: [                    'not_started'\n                  ]\n                }\n              },\n              required: [                'status'\n              ]\n            },\n            {\n              type: 'object',\n              properties: {\n                status: {\n                  type: 'string',\n                  enum: [                    'queued'\n                  ]\n                }\n              },\n              required: [                'status'\n              ]\n            },\n            {\n              type: 'object',\n              properties: {\n                status: {\n                  type: 'string',\n                  enum: [                    'in_progress'\n                  ]\n                }\n              },\n              required: [                'status'\n              ]\n            },\n            {\n              type: 'object',\n              properties: {\n                completed: {\n                  type: 'object',\n                  properties: {\n                    commit: {\n                      $ref: '#/$defs/commit'\n                    },\n                    conclusion: {\n                      type: 'string',\n                      enum: [                        'error',\n                        'warning',\n                        'note',\n                        'success',\n                        'merge_conflict',\n                        'upstream_merge_conflict',\n                        'fatal',\n                        'payment_required',\n                        'cancelled',\n                        'timed_out',\n                        'noop',\n                        'version_bump'\n                      ]\n                    },\n                    merge_conflict_pr: {\n                      type: 'object',\n                      properties: {\n                        number: {\n                          type: 'number'\n                        },\n                        repo: {\n                          type: 'object',\n                          properties: {\n                            name: {\n                              type: 'string'\n                            },\n                            owner: {\n                              type: 'string'\n                            }\n                          },\n                          required: [                            'name',\n                            'owner'\n                          ]\n                        }\n                      },\n                      required: [                        'number',\n                        'repo'\n                      ]\n                    }\n                  },\n                  required: [                    'commit',\n                    'conclusion',\n                    'merge_conflict_pr'\n                  ]\n                },\n                status: {\n                  type: 'string',\n                  enum: [                    'completed'\n                  ]\n                }\n              },\n              required: [                'completed',\n                'status'\n              ]\n            }\n          ]\n        },\n        install_url: {\n          type: 'string'\n        },\n        lint: {\n          $ref: '#/$defs/check_step'\n        },\n        object: {\n          type: 'string',\n          enum: [            'build_target'\n          ]\n        },\n        status: {\n          type: 'string',\n          enum: [            'not_started',\n            'codegen',\n            'postgen',\n            'completed'\n          ]\n        },\n        test: {\n          $ref: '#/$defs/check_step'\n        },\n        build: {\n          $ref: '#/$defs/check_step'\n        }\n      },\n      required: [        'commit',\n        'install_url',\n        'lint',\n        'object',\n        'status',\n        'test'\n      ]\n    },\n    commit: {\n      type: 'object',\n      properties: {\n        repo: {\n          type: 'object',\n          properties: {\n            branch: {\n              type: 'string'\n            },\n            name: {\n              type: 'string'\n            },\n            owner: {\n              type: 'string'\n            }\n          },\n          required: [            'branch',\n            'name',\n            'owner'\n          ]\n        },\n        sha: {\n          type: 'string'\n        }\n      },\n      required: [        'repo',\n        'sha'\n      ]\n    },\n    check_step: {\n      anyOf: [        {\n          type: 'object',\n          properties: {\n            status: {\n              type: 'string',\n              enum: [                'not_started'\n              ]\n            }\n          },\n          required: [            'status'\n          ]\n        },\n        {\n          type: 'object',\n          properties: {\n            status: {\n              type: 'string',\n              enum: [                'queued'\n              ]\n            }\n          },\n          required: [            'status'\n          ]\n        },\n        {\n          type: 'object',\n          properties: {\n            status: {\n              type: 'string',\n              enum: [                'in_progress'\n              ]\n            }\n          },\n          required: [            'status'\n          ]\n        },\n        {\n          type: 'object',\n          properties: {\n            completed: {\n              type: 'object',\n              properties: {\n                conclusion: {\n                  type: 'string',\n                  enum: [                    'success',\n                    'failure',\n                    'skipped',\n                    'cancelled',\n                    'action_required',\n                    'neutral',\n                    'timed_out'\n                  ]\n                },\n                url: {\n                  type: 'string'\n                }\n              },\n              required: [                'conclusion',\n                'url'\n              ]\n            },\n            status: {\n              type: 'string',\n              enum: [                'completed'\n              ]\n            }\n          },\n          required: [            'completed',\n            'status'\n          ]\n        }\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      buildId: {
        type: 'string',
        description: 'Build ID',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['buildId'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Stainless, args: Record<string, unknown> | undefined) => {
  const { buildId, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.builds.retrieve(buildId)));
};

export default { metadata, tool, handler };
